#include <iostream>
#include <sstream>
using std::cout, std::endl, std::istringstream;
#include "PhysicalNumber.h"
using ariel::PhysicalNumber, ariel::Unit;
#include "badkan.hpp"

int main() {
    badkan::TestCase testcase;
    int grade=0;
    int signal = setjmp(badkan::longjmp_buffer);
    if (signal == 0) {
        
        // BASIC TESTS - DO NOT CHANGE
        PhysicalNumber a(2, Unit::KM);
        PhysicalNumber b(300, Unit::M);
        PhysicalNumber c(2, Unit::HOUR);
        PhysicalNumber d(30, Unit::MIN);
        
        PhysicalNumber cm(10, Unit::CM);
        PhysicalNumber m(5.3, Unit::M);
        PhysicalNumber km(3.3, Unit::KM);
        // Time
        PhysicalNumber s(10, Unit::SEC);
        PhysicalNumber min(5.3, Unit::MIN);
        PhysicalNumber h(3.3, Unit::HOUR);
        // Weight
        PhysicalNumber g(10, Unit::G);
        PhysicalNumber kg(5.3, Unit::KG);
        PhysicalNumber ton(3.3, Unit::TON);
        
        testcase
        .setname("Basic output")
        .CHECK_OUTPUT(a, "2[km]")
        .CHECK_OUTPUT(b, "300[m]")
        
        .setname("Compatible dimensions")
        .CHECK_OUTPUT(b+a, "2300[m]")
        .CHECK_OUTPUT((a+=b), "2.3[km]")
        .CHECK_OUTPUT(a, "2.3[km]")
        .CHECK_OUTPUT(a+a, "4.6[km]")
        .CHECK_OUTPUT(b-b, "0[m]")
        .CHECK_OUTPUT(c, "2[hour]")
        .CHECK_OUTPUT(d, "30[min]")
        .CHECK_OUTPUT(d+c, "150[min]")
        
        .setname("Incompatible dimensions")
        .CHECK_THROWS(a+c)
        .CHECK_THROWS(a+d)
        .CHECK_THROWS(b+c)
        .CHECK_THROWS(b+d)
        
        .setname("Basic input")
        .CHECK_OK(istringstream("700[kg]") >> a)
        .CHECK_OUTPUT((a += PhysicalNumber(1, Unit::TON)), "1700[kg]")
      
        // YOUR TESTS - INSERT AS MANY AS YOU WANT
        //.CHECK_OUTPUT((a++), "1701[kg]")
        .CHECK_THROWS(a+PhysicalNumber(300,Unit::HOUR))
        .CHECK_THROWS(PhysicalNumber(300,Unit::HOUR)+PhysicalNumber(300,Unit::G))
        .CHECK_THROWS(PhysicalNumber(300,Unit::SEC)+PhysicalNumber(300,Unit::TON))
        .CHECK_THROWS(PhysicalNumber(300,Unit::KM)+PhysicalNumber(300,Unit::HOUR))
        .CHECK_THROWS(PhysicalNumber(300,Unit::HOUR)+PhysicalNumber(300,Unit::M))
        .CHECK_OUTPUT(PhysicalNumber(3,Unit::HOUR)+PhysicalNumber(300,Unit::MIN), "8[hour]")
        .CHECK_OUTPUT(PhysicalNumber(300,Unit::MIN)+PhysicalNumber(3,Unit::HOUR), "480[min]")
        .CHECK_OK(a=PhysicalNumber(300,Unit::HOUR))
        .CHECK_OUTPUT(a, "300[hour]")
//        .CHECK_OK(++a)
//        .CHECK_OUTPUT(a, "301[hour]")
//        .CHECK_OK(a--)
//        .CHECK_OUTPUT(a, "300[hour]")
//        .CHECK_OK(--a)
//        .CHECK_OUTPUT(a, "299[hour]")
        .CHECK_OK(a-=PhysicalNumber(200,Unit::HOUR))
        .CHECK_OUTPUT(a, "100[hour]")
        .CHECK_OK(istringstream("700[min]") >> b)
        .CHECK_OUTPUT((b) , "700[min]")
        .CHECK_OUTPUT((a<b) , "0")
        .CHECK_OUTPUT((a>=b) , "1")
        .CHECK_OK(istringstream("700[m]") >> b)
        .CHECK_OUTPUT((b) , "700[m]")
//        .CHECK_THROWS(a<b)
//        .CHECK_THROWS(a>=b)
        .CHECK_THROWS(a-b)
        .CHECK_THROWS(a-=b)
        .CHECK_OK(b=-b)
        .CHECK_OUTPUT((b) , "-700[m]")
        .CHECK_OUTPUT((-b) , "700[m]")
        // CM
        .CHECK_THROWS(cm + s)
        .CHECK_THROWS(cm + min)
        .CHECK_THROWS(cm + h)
        .CHECK_THROWS(cm - s)
        .CHECK_THROWS(cm - min)
        .CHECK_THROWS(cm - h)
        .CHECK_THROWS(cm > s)
        .CHECK_THROWS(cm < s)
        .CHECK_THROWS(cm >= s)
        .CHECK_THROWS(cm <= s)
        .CHECK_THROWS(cm != s)
        .CHECK_THROWS(cm == s)
        .CHECK_THROWS((cm += PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((cm += PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((cm += PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS(cm > min)
        .CHECK_THROWS(cm < min)
        .CHECK_THROWS(cm >= min)
        .CHECK_THROWS(cm <= min)
        .CHECK_THROWS(cm != min)
        .CHECK_THROWS(cm == min)
        .CHECK_THROWS((cm += PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((cm += PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((cm += PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS(cm > h)
        .CHECK_THROWS(cm < h)
        .CHECK_THROWS(cm >= h)
        .CHECK_THROWS(cm <= h)
        .CHECK_THROWS(cm != h)
        .CHECK_THROWS(cm == h)
        .CHECK_THROWS((cm += PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((cm += PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((cm += PhysicalNumber(100, Unit::HOUR)))
        .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::HOUR)))
        // METER
        .CHECK_THROWS(m + s)
        .CHECK_THROWS(m + min)
        .CHECK_THROWS(m + h)
        .CHECK_THROWS(m - s)
        .CHECK_THROWS(m - min)
        .CHECK_THROWS(m - h)
        .CHECK_THROWS(m > s)
        .CHECK_THROWS(m < s)
        .CHECK_THROWS(m >= s)
        .CHECK_THROWS(m <= s)
        .CHECK_THROWS(m != s)
        .CHECK_THROWS(m == s)
        .CHECK_THROWS((m += PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((m += PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((m += PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((m += PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS((m -= PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((m -= PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((m -= PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((m -= PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS(m > min)
        .CHECK_THROWS(m < min)
        .CHECK_THROWS(m >= min)
        .CHECK_THROWS(m <= min)
        .CHECK_THROWS(m != min)
        .CHECK_THROWS(m == min)
        .CHECK_THROWS((m += PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((m += PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((m += PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((m += PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS((m -= PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((m -= PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((m -= PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((m -= PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS(m > h)
        .CHECK_THROWS(m < h)
        .CHECK_THROWS(m >= h)
        .CHECK_THROWS(m <= h)
        .CHECK_THROWS(m != h)
        .CHECK_THROWS(m == h)
        .CHECK_THROWS((m += PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((m += PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((m += PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((m += PhysicalNumber(100, Unit::HOUR)))
        .CHECK_THROWS((m -= PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((m -= PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((m -= PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((m -= PhysicalNumber(100, Unit::HOUR)))
        // KM
        .CHECK_THROWS(km + s)
        .CHECK_THROWS(km + min)
        .CHECK_THROWS(km + h)
        .CHECK_THROWS(km - s)
        .CHECK_THROWS(km - min)
        .CHECK_THROWS(km - h)
        .CHECK_THROWS(km > s)
        .CHECK_THROWS(km < s)
        .CHECK_THROWS(km >= s)
        .CHECK_THROWS(km <= s)
        .CHECK_THROWS(km != s)
        .CHECK_THROWS(km == s)
        .CHECK_THROWS((km += PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((km += PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((km += PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((km += PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS((km -= PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((km -= PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((km -= PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS(km > min)
        .CHECK_THROWS(km < min)
        .CHECK_THROWS(km >= min)
        .CHECK_THROWS(km <= min)
        .CHECK_THROWS(km != min)
        .CHECK_THROWS(km == min)
        .CHECK_THROWS((km += PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((km += PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((km += PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((km += PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS((km -= PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((km -= PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((km -= PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS(km > h)
        .CHECK_THROWS(km < h)
        .CHECK_THROWS(km >= h)
        .CHECK_THROWS(km <= h)
        .CHECK_THROWS(km != h)
        .CHECK_THROWS(km == h)
        .CHECK_THROWS((km += PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((km += PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((km += PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((km += PhysicalNumber(100, Unit::HOUR)))
        .CHECK_THROWS((km -= PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((km -= PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((km -= PhysicalNumber(100, Unit::HOUR)))
        ///////////////////////////////////////////////////////////////////
        .setname("TIME with LENGTH")
        // SEC
        .CHECK_THROWS(s + cm)
        .CHECK_THROWS(s + m)
        .CHECK_THROWS(s + km)
        .CHECK_THROWS(s - cm)
        .CHECK_THROWS(s - m)
        .CHECK_THROWS(s - km)
        .CHECK_THROWS(s > cm)
        .CHECK_THROWS(s < cm)
        .CHECK_THROWS(s >= cm)
        .CHECK_THROWS(s <= cm)
        .CHECK_THROWS(s != cm)
        .CHECK_THROWS(s == cm)
        .CHECK_THROWS((s += PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((s += PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((s += PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((s += PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS((s -= PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((s -= PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((s -= PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS(s > m)
        .CHECK_THROWS(s < m)
        .CHECK_THROWS(s >= m)
        .CHECK_THROWS(s <= m)
        .CHECK_THROWS(s != m)
        .CHECK_THROWS(s == m)
        .CHECK_THROWS((s += PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((s += PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((s += PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((s += PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS((s -= PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((s -= PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((s -= PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS(s > km)
        .CHECK_THROWS(s < km)
        .CHECK_THROWS(s >= km)
        .CHECK_THROWS(s <= km)
        .CHECK_THROWS(s != km)
        .CHECK_THROWS(s == km)
        .CHECK_THROWS((s += PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((s += PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((s += PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((s += PhysicalNumber(100, Unit::KM)))
        .CHECK_THROWS((s -= PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((s -= PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((s -= PhysicalNumber(100, Unit::KM)))
        // MIN
        .CHECK_THROWS(min + cm)
        .CHECK_THROWS(min + m)
        .CHECK_THROWS(min + km)
        .CHECK_THROWS(min - cm)
        .CHECK_THROWS(min - m)
        .CHECK_THROWS(min - km)
        .CHECK_THROWS(min > cm)
        .CHECK_THROWS(min < cm)
        .CHECK_THROWS(min >= cm)
        .CHECK_THROWS(min <= cm)
        .CHECK_THROWS(min != cm)
        .CHECK_THROWS(min == cm)
        .CHECK_THROWS((min += PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((min += PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((min += PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((min += PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS((min -= PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((min -= PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((min -= PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS(min > m)
        .CHECK_THROWS(min < m)
        .CHECK_THROWS(min >= m)
        .CHECK_THROWS(min <= m)
        .CHECK_THROWS(min != m)
        .CHECK_THROWS(min == m)
        .CHECK_THROWS((min += PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((min += PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((min += PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((min += PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS((min -= PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((min -= PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((min -= PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS(min > km)
        .CHECK_THROWS(min < km)
        .CHECK_THROWS(min >= km)
        .CHECK_THROWS(min <= km)
        .CHECK_THROWS(min != km)
        .CHECK_THROWS(min == km)
        .CHECK_THROWS((min += PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((min += PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((min += PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((min += PhysicalNumber(100, Unit::KM)))
        .CHECK_THROWS((min -= PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((min -= PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((min -= PhysicalNumber(100, Unit::KM)))
        // HOUR
        .CHECK_THROWS(h + cm)
        .CHECK_THROWS(h + m)
        .CHECK_THROWS(h + km)
        .CHECK_THROWS(h - cm)
        .CHECK_THROWS(h - m)
        .CHECK_THROWS(h - km)
        .CHECK_THROWS(h > cm)
        .CHECK_THROWS(h < cm)
        .CHECK_THROWS(h >= cm)
        .CHECK_THROWS(h <= cm)
        .CHECK_THROWS(h != cm)
        .CHECK_THROWS(h == cm)
        .CHECK_THROWS((h += PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((h += PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((h += PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((h += PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS((h -= PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((h -= PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((h -= PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS(h > m)
        .CHECK_THROWS(h < m)
        .CHECK_THROWS(h >= m)
        .CHECK_THROWS(h <= m)
        .CHECK_THROWS(h != m)
        .CHECK_THROWS(h == m)
        .CHECK_THROWS((h += PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((h += PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((h += PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((h += PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS((h -= PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((h -= PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((h -= PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS(h > km)
        .CHECK_THROWS(h < km)
        .CHECK_THROWS(h >= km)
        .CHECK_THROWS(h <= km)
        .CHECK_THROWS(h != km)
        .CHECK_THROWS(h == km)
        .CHECK_THROWS((h += PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((h += PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((h += PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((h += PhysicalNumber(100, Unit::KM)))
        .CHECK_THROWS((h -= PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((h -= PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((h -= PhysicalNumber(100, Unit::KM)))
        ///////////////////////////////////////////////////////////////////
        .setname("TIME with WEIGHT")
        // SEC
        .CHECK_THROWS(s + g)
        .CHECK_THROWS(s + kg)
        .CHECK_THROWS(s + ton)
        .CHECK_THROWS(s - g)
        .CHECK_THROWS(s - kg)
        .CHECK_THROWS(s - ton)
        .CHECK_THROWS(s > g)
        .CHECK_THROWS(s < g)
        .CHECK_THROWS(s >= g)
        .CHECK_THROWS(s <= g)
        .CHECK_THROWS(s != g)
        .CHECK_THROWS(s == g)
        .CHECK_THROWS((s += PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((s += PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((s += PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((s += PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS((s -= PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((s -= PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((s -= PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS(s > kg)
        .CHECK_THROWS(s < kg)
        .CHECK_THROWS(s >= kg)
        .CHECK_THROWS(s <= kg)
        .CHECK_THROWS(s != kg)
        .CHECK_THROWS(s == kg)
        .CHECK_THROWS((s += PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((s += PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((s += PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((s += PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS((s -= PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((s -= PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((s -= PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS(s > ton)
        .CHECK_THROWS(s < ton)
        .CHECK_THROWS(s >= ton)
        .CHECK_THROWS(s <= ton)
        .CHECK_THROWS(s != ton)
        .CHECK_THROWS(s == ton)
        .CHECK_THROWS((s += PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((s += PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((s += PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((s += PhysicalNumber(100, Unit::TON)))
        .CHECK_THROWS((s -= PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((s -= PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((s -= PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((s -= PhysicalNumber(100, Unit::TON)))
        // MIN
        .CHECK_THROWS(min + g)
        .CHECK_THROWS(min + kg)
        .CHECK_THROWS(min + ton)
        .CHECK_THROWS(min - g)
        .CHECK_THROWS(min - kg)
        .CHECK_THROWS(min - ton)
        .CHECK_THROWS(min > g)
        .CHECK_THROWS(min < g)
        .CHECK_THROWS(min >= g)
        .CHECK_THROWS(min <= g)
        .CHECK_THROWS(min != g)
        .CHECK_THROWS(min == g)
        .CHECK_THROWS((min += PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((min += PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((min += PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((min += PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS((min -= PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((min -= PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((min -= PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS(min > kg)
        .CHECK_THROWS(min < kg)
        .CHECK_THROWS(min >= kg)
        .CHECK_THROWS(min <= kg)
        .CHECK_THROWS(min != kg)
        .CHECK_THROWS(min == kg)
        .CHECK_THROWS((min += PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((min += PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((min += PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((min += PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS((min -= PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((min -= PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((min -= PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS(min > ton)
        .CHECK_THROWS(min < ton)
        .CHECK_THROWS(min >= ton)
        .CHECK_THROWS(min <= ton)
        .CHECK_THROWS(min != ton)
        .CHECK_THROWS(min == ton)
        .CHECK_THROWS((min += PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((min += PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((min += PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((min += PhysicalNumber(100, Unit::TON)))
        .CHECK_THROWS((min -= PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((min -= PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((min -= PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((min -= PhysicalNumber(100, Unit::TON)))
        // HOUR
        .CHECK_THROWS(h + g)
        .CHECK_THROWS(h + kg)
        .CHECK_THROWS(h + ton)
        .CHECK_THROWS(h - g)
        .CHECK_THROWS(h - kg)
        .CHECK_THROWS(h - ton)
        .CHECK_THROWS(h > g)
        .CHECK_THROWS(h < g)
        .CHECK_THROWS(h >= g)
        .CHECK_THROWS(h <= g)
        .CHECK_THROWS(h != g)
        .CHECK_THROWS(h == g)
        .CHECK_THROWS((h += PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((h += PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((h += PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((h += PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS((h -= PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((h -= PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((h -= PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS(h > kg)
        .CHECK_THROWS(h < kg)
        .CHECK_THROWS(h >= kg)
        .CHECK_THROWS(h <= kg)
        .CHECK_THROWS(h != kg)
        .CHECK_THROWS(h == kg)
        .CHECK_THROWS((h += PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((h += PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((h += PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((h += PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS((h -= PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((h -= PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((h -= PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS(h > ton)
        .CHECK_THROWS(h < ton)
        .CHECK_THROWS(h >= ton)
        .CHECK_THROWS(h <= ton)
        .CHECK_THROWS(h != ton)
        .CHECK_THROWS(h == ton)
        .CHECK_THROWS((h += PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((h += PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((h += PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((h += PhysicalNumber(100, Unit::TON)))
        .CHECK_THROWS((h -= PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((h -= PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((h -= PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((h -= PhysicalNumber(100, Unit::TON)))
        ///////////////////////////////////////////////////////////////////
        .setname("LENGTH with WEIGHT")
        // CM
        .CHECK_THROWS(cm + g)
        .CHECK_THROWS(cm + kg)
        .CHECK_THROWS(cm + ton)
        .CHECK_THROWS(cm - g)
        .CHECK_THROWS(cm - kg)
        .CHECK_THROWS(cm - ton)
        .CHECK_THROWS(cm > g)
        .CHECK_THROWS(cm < g)
        .CHECK_THROWS(cm >= g)
        .CHECK_THROWS(cm <= g)
        .CHECK_THROWS(cm != g)
        .CHECK_THROWS(cm == g)
        .CHECK_THROWS((cm += PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((cm += PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((cm += PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS(cm > kg)
        .CHECK_THROWS(cm < kg)
        .CHECK_THROWS(cm >= kg)
        .CHECK_THROWS(cm <= kg)
        .CHECK_THROWS(cm != kg)
        .CHECK_THROWS(cm == kg)
        .CHECK_THROWS((cm += PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((cm += PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((cm += PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS(cm > ton)
        .CHECK_THROWS(cm < ton)
        .CHECK_THROWS(cm >= ton)
        .CHECK_THROWS(cm <= ton)
        .CHECK_THROWS(cm != ton)
        .CHECK_THROWS(cm == ton)
        .CHECK_THROWS((cm += PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((cm += PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((cm += PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((cm += PhysicalNumber(100, Unit::TON)))
        .CHECK_THROWS((cm -= PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((cm -= PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((cm -= PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((cm -= PhysicalNumber(100, Unit::TON)))
        // METER
        .CHECK_THROWS(m + g)
        .CHECK_THROWS(m + kg)
        .CHECK_THROWS(m + ton)
        .CHECK_THROWS(m - g)
        .CHECK_THROWS(m - kg)
        .CHECK_THROWS(m - ton)
        .CHECK_THROWS(m > g)
        .CHECK_THROWS(m < g)
        .CHECK_THROWS(m >= g)
        .CHECK_THROWS(m <= g)
        .CHECK_THROWS(m != g)
        .CHECK_THROWS(m == g)
        .CHECK_THROWS((m += PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((m += PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((m += PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((m += PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS((m -= PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((m -= PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((m -= PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((m -= PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS(m > kg)
        .CHECK_THROWS(m < kg)
        .CHECK_THROWS(m >= kg)
        .CHECK_THROWS(m <= kg)
        .CHECK_THROWS(m != kg)
        .CHECK_THROWS(m == kg)
        .CHECK_THROWS((m += PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((m += PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((m += PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((m += PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS((m -= PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((m -= PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((m -= PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((m -= PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS(m > ton)
        .CHECK_THROWS(m < ton)
        .CHECK_THROWS(m >= ton)
        .CHECK_THROWS(m <= ton)
        .CHECK_THROWS(m != ton)
        .CHECK_THROWS(m == ton)
        .CHECK_THROWS((m += PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((m += PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((m += PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((m += PhysicalNumber(100, Unit::TON)))
        .CHECK_THROWS((m -= PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((m -= PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((m -= PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((m -= PhysicalNumber(100, Unit::TON)))
        // KM
        .CHECK_THROWS(km + g)
        .CHECK_THROWS(km + kg)
        .CHECK_THROWS(km + ton)
        .CHECK_THROWS(km - g)
        .CHECK_THROWS(km - kg)
        .CHECK_THROWS(km - ton)
        .CHECK_THROWS(km > g)
        .CHECK_THROWS(km < g)
        .CHECK_THROWS(km >= g)
        .CHECK_THROWS(km <= g)
        .CHECK_THROWS(km != g)
        .CHECK_THROWS(km == g)
        .CHECK_THROWS((km += PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((km += PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((km += PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((km += PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS((km -= PhysicalNumber(1, Unit::G)))
        .CHECK_THROWS((km -= PhysicalNumber(0, Unit::G)))
        .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::G)))
        .CHECK_THROWS((km -= PhysicalNumber(100, Unit::G)))
        .CHECK_THROWS(km > kg)
        .CHECK_THROWS(km < kg)
        .CHECK_THROWS(km >= kg)
        .CHECK_THROWS(km <= kg)
        .CHECK_THROWS(km != kg)
        .CHECK_THROWS(km == kg)
        .CHECK_THROWS((km += PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((km += PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((km += PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((km += PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS((km -= PhysicalNumber(1, Unit::KG)))
        .CHECK_THROWS((km -= PhysicalNumber(0, Unit::KG)))
        .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::KG)))
        .CHECK_THROWS((km -= PhysicalNumber(100, Unit::KG)))
        .CHECK_THROWS(km > ton)
        .CHECK_THROWS(km < ton)
        .CHECK_THROWS(km >= ton)
        .CHECK_THROWS(km <= ton)
        .CHECK_THROWS(km != ton)
        .CHECK_THROWS(km == ton)
        .CHECK_THROWS((km += PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((km += PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((km += PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((km += PhysicalNumber(100, Unit::TON)))
        .CHECK_THROWS((km -= PhysicalNumber(1, Unit::TON)))
        .CHECK_THROWS((km -= PhysicalNumber(0, Unit::TON)))
        .CHECK_THROWS((km -= PhysicalNumber(-1, Unit::TON)))
        .CHECK_THROWS((km -= PhysicalNumber(100, Unit::TON)))
        ///////////////////////////////////////////////////////////////////
        .setname("WEIGHT with TIME")
        // G
        .CHECK_THROWS(g + s)
        .CHECK_THROWS(g + min)
        .CHECK_THROWS(g + h)
        .CHECK_THROWS(g - s)
        .CHECK_THROWS(g - min)
        .CHECK_THROWS(g - h)
        .CHECK_THROWS(g > s)
        .CHECK_THROWS(g < s)
        .CHECK_THROWS(g >= s)
        .CHECK_THROWS(g <= s)
        .CHECK_THROWS(g != s)
        .CHECK_THROWS(g == s)
        .CHECK_THROWS((g += PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((g += PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((g += PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((g += PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS((g -= PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((g -= PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((g -= PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS(g > min)
        .CHECK_THROWS(g < min)
        .CHECK_THROWS(g >= min)
        .CHECK_THROWS(g <= min)
        .CHECK_THROWS(g != min)
        .CHECK_THROWS(g == min)
        .CHECK_THROWS((g += PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((g += PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((g += PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((g += PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS((g -= PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((g -= PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((g -= PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS(g > h)
        .CHECK_THROWS(g < h)
        .CHECK_THROWS(g >= h)
        .CHECK_THROWS(g <= h)
        .CHECK_THROWS(g != h)
        .CHECK_THROWS(g == h)
        .CHECK_THROWS((g += PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((g += PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((g += PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((g += PhysicalNumber(100, Unit::HOUR)))
        .CHECK_THROWS((g -= PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((g -= PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((g -= PhysicalNumber(100, Unit::HOUR)))
        // KG
        .CHECK_THROWS(kg + s)
        .CHECK_THROWS(kg + min)
        .CHECK_THROWS(kg + h)
        .CHECK_THROWS(kg - s)
        .CHECK_THROWS(kg - min)
        .CHECK_THROWS(kg - h)
        .CHECK_THROWS(kg > s)
        .CHECK_THROWS(kg < s)
        .CHECK_THROWS(kg >= s)
        .CHECK_THROWS(kg <= s)
        .CHECK_THROWS(kg != s)
        .CHECK_THROWS(kg == s)
        .CHECK_THROWS((kg += PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((kg += PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((kg += PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS(kg > min)
        .CHECK_THROWS(kg < min)
        .CHECK_THROWS(kg >= min)
        .CHECK_THROWS(kg <= min)
        .CHECK_THROWS(kg != min)
        .CHECK_THROWS(kg == min)
        .CHECK_THROWS((kg += PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((kg += PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((kg += PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS(kg > h)
        .CHECK_THROWS(kg < h)
        .CHECK_THROWS(kg >= h)
        .CHECK_THROWS(kg <= h)
        .CHECK_THROWS(kg != h)
        .CHECK_THROWS(kg == h)
        .CHECK_THROWS((kg += PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((kg += PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((kg += PhysicalNumber(100, Unit::HOUR)))
        .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::HOUR)))
        // TON
        .CHECK_THROWS(ton + s)
        .CHECK_THROWS(ton + min)
        .CHECK_THROWS(ton + h)
        .CHECK_THROWS(ton - s)
        .CHECK_THROWS(ton - min)
        .CHECK_THROWS(ton - h)
        .CHECK_THROWS(ton > s)
        .CHECK_THROWS(ton < s)
        .CHECK_THROWS(ton >= s)
        .CHECK_THROWS(ton <= s)
        .CHECK_THROWS(ton != s)
        .CHECK_THROWS(ton == s)
        .CHECK_THROWS((ton += PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((ton += PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((ton += PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((ton += PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS((ton -= PhysicalNumber(1, Unit::SEC)))
        .CHECK_THROWS((ton -= PhysicalNumber(0, Unit::SEC)))
        .CHECK_THROWS((ton -= PhysicalNumber(-1, Unit::SEC)))
        .CHECK_THROWS((ton -= PhysicalNumber(100, Unit::SEC)))
        .CHECK_THROWS(ton > min)
        .CHECK_THROWS(ton < min)
        .CHECK_THROWS(ton >= min)
        .CHECK_THROWS(ton <= min)
        .CHECK_THROWS(ton != min)
        .CHECK_THROWS(ton == min)
        .CHECK_THROWS((ton += PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((ton += PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((ton += PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((ton += PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS((ton -= PhysicalNumber(1, Unit::MIN)))
        .CHECK_THROWS((ton -= PhysicalNumber(0, Unit::MIN)))
        .CHECK_THROWS((ton -= PhysicalNumber(-1, Unit::MIN)))
        .CHECK_THROWS((ton -= PhysicalNumber(100, Unit::MIN)))
        .CHECK_THROWS(ton > h)
        .CHECK_THROWS(ton < h)
        .CHECK_THROWS(ton >= h)
        .CHECK_THROWS(ton <= h)
        .CHECK_THROWS(ton != h)
        .CHECK_THROWS(ton == h)
        .CHECK_THROWS((ton += PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((ton += PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((ton += PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((ton += PhysicalNumber(100, Unit::HOUR)))
        .CHECK_THROWS((ton -= PhysicalNumber(1, Unit::HOUR)))
        .CHECK_THROWS((ton -= PhysicalNumber(0, Unit::HOUR)))
        .CHECK_THROWS((ton -= PhysicalNumber(-1, Unit::HOUR)))
        .CHECK_THROWS((ton -= PhysicalNumber(100, Unit::HOUR)))
        ///////////////////////////////////////////////////////////////////
        .setname("WEIGHT with LENGTH")
        // G
        .CHECK_THROWS(g + cm)
        .CHECK_THROWS(g + m)
        .CHECK_THROWS(g + km)
        .CHECK_THROWS(g - cm)
        .CHECK_THROWS(g - m)
        .CHECK_THROWS(g - km)
        .CHECK_THROWS(g > cm)
        .CHECK_THROWS(g < cm)
        .CHECK_THROWS(g >= cm)
        .CHECK_THROWS(g <= cm)
        .CHECK_THROWS(g != cm)
        .CHECK_THROWS(g == cm)
        .CHECK_THROWS((g += PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((g += PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((g += PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((g += PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS((g -= PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((g -= PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((g -= PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS(g > m)
        .CHECK_THROWS(g < m)
        .CHECK_THROWS(g >= m)
        .CHECK_THROWS(g <= m)
        .CHECK_THROWS(g != m)
        .CHECK_THROWS(g == m)
        .CHECK_THROWS((g += PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((g += PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((g += PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((g += PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS((g -= PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((g -= PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((g -= PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS(g > km)
        .CHECK_THROWS(g < km)
        .CHECK_THROWS(g >= km)
        .CHECK_THROWS(g <= km)
        .CHECK_THROWS(g != km)
        .CHECK_THROWS(g == km)
        .CHECK_THROWS((g += PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((g += PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((g += PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((g += PhysicalNumber(100, Unit::KM)))
        .CHECK_THROWS((g -= PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((g -= PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((g -= PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((g -= PhysicalNumber(100, Unit::KM)))
        // KG
        .CHECK_THROWS(kg + cm)
        .CHECK_THROWS(kg + m)
        .CHECK_THROWS(kg + km)
        .CHECK_THROWS(kg - cm)
        .CHECK_THROWS(kg - m)
        .CHECK_THROWS(kg - km)
        .CHECK_THROWS(kg > cm)
        .CHECK_THROWS(kg < cm)
        .CHECK_THROWS(kg >= cm)
        .CHECK_THROWS(kg <= cm)
        .CHECK_THROWS(kg != cm)
        .CHECK_THROWS(kg == cm)
        .CHECK_THROWS((kg += PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((kg += PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((kg += PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS(kg > m)
        .CHECK_THROWS(kg < m)
        .CHECK_THROWS(kg >= m)
        .CHECK_THROWS(kg <= m)
        .CHECK_THROWS(kg != m)
        .CHECK_THROWS(kg == m)
        .CHECK_THROWS((kg += PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((kg += PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((kg += PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS(kg > km)
        .CHECK_THROWS(kg < km)
        .CHECK_THROWS(kg >= km)
        .CHECK_THROWS(kg <= km)
        .CHECK_THROWS(kg != km)
        .CHECK_THROWS(kg == km)
        .CHECK_THROWS((kg += PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((kg += PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((kg += PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((kg += PhysicalNumber(100, Unit::KM)))
        .CHECK_THROWS((kg -= PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((kg -= PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((kg -= PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((kg -= PhysicalNumber(100, Unit::KM)))
        // TON
        .CHECK_THROWS(ton + cm)
        .CHECK_THROWS(ton + m)
        .CHECK_THROWS(ton + km)
        .CHECK_THROWS(ton - cm)
        .CHECK_THROWS(ton - m)
        .CHECK_THROWS(ton - km)
        .CHECK_THROWS(ton > cm)
        .CHECK_THROWS(ton < cm)
        .CHECK_THROWS(ton >= cm)
        .CHECK_THROWS(ton <= cm)
        .CHECK_THROWS(ton != cm)
        .CHECK_THROWS(ton == cm)
        .CHECK_THROWS((ton += PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((ton += PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((ton += PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((ton += PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS((ton -= PhysicalNumber(1, Unit::CM)))
        .CHECK_THROWS((ton -= PhysicalNumber(0, Unit::CM)))
        .CHECK_THROWS((ton -= PhysicalNumber(-1, Unit::CM)))
        .CHECK_THROWS((ton -= PhysicalNumber(100, Unit::CM)))
        .CHECK_THROWS(ton > m)
        .CHECK_THROWS(ton < m)
        .CHECK_THROWS(ton >= m)
        .CHECK_THROWS(ton <= m)
        .CHECK_THROWS(ton != m)
        .CHECK_THROWS(ton == m)
        .CHECK_THROWS((ton += PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((ton += PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((ton += PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((ton += PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS((ton -= PhysicalNumber(1, Unit::M)))
        .CHECK_THROWS((ton -= PhysicalNumber(0, Unit::M)))
        .CHECK_THROWS((ton -= PhysicalNumber(-1, Unit::M)))
        .CHECK_THROWS((ton -= PhysicalNumber(100, Unit::M)))
        .CHECK_THROWS(ton > km)
        .CHECK_THROWS(ton < km)
        .CHECK_THROWS(ton >= km)
        .CHECK_THROWS(ton <= km)
        .CHECK_THROWS(ton != km)
        .CHECK_THROWS(ton == km)
        .CHECK_THROWS((ton += PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((ton += PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((ton += PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((ton += PhysicalNumber(100, Unit::KM)))
        .CHECK_THROWS((ton -= PhysicalNumber(1, Unit::KM)))
        .CHECK_THROWS((ton -= PhysicalNumber(0, Unit::KM)))
        .CHECK_THROWS((ton -= PhysicalNumber(-1, Unit::KM)))
        .CHECK_THROWS((ton -= PhysicalNumber(100, Unit::KM)))
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        .setname("Basic output")
        .CHECK_OUTPUT(cm, "10[cm]")
        .CHECK_OUTPUT(m, "5.3[m]")
        .CHECK_OUTPUT(km, "3.3[km]")
        .setname("Compatible dimensions")
        // CM with CM
        .CHECK_OUTPUT(cm + cm, "20[cm]")
        .CHECK_OUTPUT((cm += cm), "20[cm]")
        .CHECK_OK(istringstream("10[cm]") >> cm)
        .CHECK_OUTPUT(cm - cm, "0[cm]")
        .CHECK_OUTPUT((cm -= cm), "0[cm]")
        .CHECK_OK(istringstream("10[cm]") >> cm)
        // CM with METER
        .CHECK_OUTPUT(cm + m, "540[cm]")
        .CHECK_OUTPUT((cm += m), "540[cm]")
        .CHECK_OK(istringstream("10[cm]") >> cm)
        .CHECK_OUTPUT(cm - m, "-520[cm]")
        .CHECK_OUTPUT((cm -= m), "-520[cm]")
        .CHECK_OK(istringstream("10[cm]") >> cm)
        // CM with KM
        .CHECK_OUTPUT(cm + km, "330010[cm]")
        .CHECK_OUTPUT((cm += km), "330010[cm]")
        .CHECK_OK(istringstream("10[cm]") >> cm)
        .CHECK_OUTPUT(cm - m, "-520[cm]")
        .CHECK_OUTPUT((cm -= m), "-520[cm]")
        .CHECK_OK(istringstream("10[cm]") >> cm)
        ///////////////////////////////////////////////////////////
        // METER with CM
        .CHECK_OUTPUT(m + cm, "5.4[m]")
        .CHECK_OUTPUT((m += cm), "5.4[m]")
        .CHECK_OK(istringstream("5.3[m]") >> m)
        .CHECK_OUTPUT(m - cm, "5.2[m]")
        .CHECK_OUTPUT((m -= cm), "5.2[m]")
        .CHECK_OK(istringstream("5.3[m]") >> m)
        // METER with METER
        .CHECK_OUTPUT(m + m, "10.6[m]")
        .CHECK_OUTPUT((m += m), "10.6[m]")
        .CHECK_OK(istringstream("5.3[m]") >> m)
        .CHECK_OUTPUT(m - m, "0[m]")
        .CHECK_OUTPUT((m -= m), "0[m]")
        .CHECK_OK(istringstream("5.3[m]") >> m)
        // METER with KM
        .CHECK_OUTPUT(m + km, "3305.3[m]")
        .CHECK_OUTPUT((m += km), "3305.3[m]")
        .CHECK_OK(istringstream("5.3[m]") >> m)
        .CHECK_OUTPUT(m - km, "-3294.7[m]")
        .CHECK_OUTPUT((m -= km), "-3294.7[m]")
        .CHECK_OK(istringstream("5.3[m]") >> m)
        ///////////////////////////////////////////////////////////
        // KM with CM
        .CHECK_OUTPUT(km + cm, "3.3001[km]")
        .CHECK_OUTPUT((km += cm), "3.3001[km]")
        .CHECK_OK(istringstream("3.3[km]") >> km)
        .CHECK_OUTPUT(km - cm, "3.2999[km]")
        .CHECK_OUTPUT((km -= cm), "3.2999[km]")
        .CHECK_OK(istringstream("3.3[km]") >> km)
        // KM with METER
        .CHECK_OUTPUT(km + m, "3.3053[km]")
        .CHECK_OUTPUT((km += m), "3.3053[km]")
        .CHECK_OK(istringstream("3.3[km]") >> km)
        .CHECK_OUTPUT(km - m, "3.2947[km]")
        .CHECK_OUTPUT((km -= m), "3.2947[km]")
        .CHECK_OK(istringstream("3.3[km]") >> km)
        // KM with KM
        .CHECK_OUTPUT(km + km, "6.6[km]")
        .CHECK_OUTPUT((km += km), "6.6[km]")
        .CHECK_OK(istringstream("3.3[km]") >> km)
        .CHECK_OUTPUT(km - km, "0[km]")
        .CHECK_OUTPUT((km -= km), "0[km]")
        .CHECK_OK(istringstream("3.3[km]") >> km)
        .CHECK_OUTPUT((km += PhysicalNumber(6, Unit::KM)), "9.3[km]")
        .CHECK_OUTPUT((km -= PhysicalNumber(2, Unit::KM)), "7.3[km]")
        .CHECK_OUTPUT((m += PhysicalNumber(4.2, Unit::M)), "9.5[m]")
        .CHECK_OUTPUT((m -= PhysicalNumber(2.1, Unit::M)), "7.4[m]")
        .CHECK_OUTPUT((cm += PhysicalNumber(600, Unit::CM)), "610[cm]")
        .CHECK_OUTPUT((cm -= PhysicalNumber(0, Unit::M)), "610[cm]")
        .setname("boolean")
        .CHECK_EQUAL(cm == m, false)
        .CHECK_EQUAL(m == km, false)
        .CHECK_EQUAL(cm == cm, true)
        .CHECK_EQUAL(cm == PhysicalNumber(6.1, Unit::M), true)
        .CHECK_EQUAL(cm == PhysicalNumber(0.0061, Unit::KM), true)
        .CHECK_EQUAL(cm != PhysicalNumber(6.1, Unit::M), false)
        .CHECK_EQUAL(cm > PhysicalNumber(0.0061, Unit::KM), false)
        .CHECK_EQUAL(m < PhysicalNumber(7.5, Unit::M), true)
        .CHECK_EQUAL(cm >= PhysicalNumber(0.0061, Unit::KM), true)
        .CHECK_EQUAL(km >= PhysicalNumber(3, Unit::CM), true)
        .setname("unary")
        .CHECK_EQUAL(+PhysicalNumber(-2, Unit::CM), PhysicalNumber(-2, Unit::CM))
        .CHECK_EQUAL(+PhysicalNumber(0, Unit::MIN), PhysicalNumber(0, Unit::MIN))
        .CHECK_EQUAL(-PhysicalNumber(1, Unit::MIN), PhysicalNumber(-1, Unit::MIN))
        .CHECK_EQUAL(-m, PhysicalNumber(-7.4, Unit::M))
        .setname("postfix++")
        .CHECK_OUTPUT(cm++, "611[cm]")
        .CHECK_OUTPUT(m++, "8.4[m]")
        .CHECK_OUTPUT(km++, "8.3[km]")
        .setname("postfix--")
        .CHECK_OUTPUT(cm--, "610[cm]")
        .CHECK_OUTPUT(m--, "7.4[m]")
        .CHECK_OUTPUT(km--, "7.3[km]")
        .setname("++prefix")
        .CHECK_OUTPUT(++cm, "611[cm]")
        .CHECK_OUTPUT(++m, "8.4[m]")
        .CHECK_OUTPUT(++km, "8.3[km]")
        .setname("--prefix")
        .CHECK_OUTPUT(--cm, "610[cm]")
        .CHECK_OUTPUT(--m, "7.4[m]")
        .CHECK_OUTPUT(--km, "7.3[km]")
        .setname("MISC")
        .setname("Input")
        .CHECK_OK(istringstream("300[kg]") >> kg)
        .CHECK_OUTPUT(kg, "300[kg]")
        .CHECK_OK(istringstream("22[hour]") >> h)
        .CHECK_OUTPUT(h, "22[hour]")
        .CHECK_OK(istringstream("0.3[m]") >> m)
        .CHECK_OUTPUT(m, "0.3[m]")
        .CHECK_OK(istringstream("700[kg]") >> m)
        .CHECK_OUTPUT(m, "700[kg]")
        .CHECK_OK(istringstream("5[m]") >> h)
        .CHECK_OUTPUT(h, "5[m]")
       
        .setname("...")
       
        .print(cout, /*show_grade=*/false);
        grade = testcase.grade();
    } else {
        testcase.print_signal(signal);
        grade = 0;
    }
    cout <<  "*** Grade: " << grade << " ***" << endl;
    return grade;
}
